# GitLab continuous integration file to build and deploy repository.
#
# For a reference of the CI file syntax, visit
# https://docs.gitlab.com/ee/ci/yaml.

---
# Workflow rules define when the CI pipeline is created. Rule order matters
# since they are evaluated until first match.
workflow:
  # Makes pipeline run on Git tags, merge requests, manual web run, and on
  # branch commits when no merge request is open. For more information, visit
  # https://docs.gitlab.com/ee/ci/pipelines/merge_request_pipelines.html and
  # https://docs.gitlab.com/ee/ci/yaml/workflow.html#switch-between-branch-pipelines-and-merge-request-pipelines.
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_PIPELINE_SOURCE =~ /(merge_request_event|web)/
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BRANCH

# Jobs of the same stage run in parallel. Jobs of the next stage only run after
# all current jobs have completed successfully.
stages:
  - build
  - deploy

# Environment variables that apply to all jobs.
variables:
  CI_WEB_DEBUG: "false"
  CI_WEB_JOB: test-linux
  CI_WEB_PYTHON_VERSION: "3.10"
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
  PIP_DISABLE_PIP_VERSION_CHECK: "true"
  PIP_ROOT_USER_ACTION: ignore
  POETRY_VIRTUALENVS_IN_PROJECT: "true"
  PYTHON_VERSION_DEFAULT: "3.10"

# Contains settings that apply to all jobs unless overridden.
default:
  # Allows for debugging via Tmate session for manual pipelines.
  after_script:
    - |
      if [[ "$CI_WEB_DEBUG" == "true" ]]; then
        bash scripts/setup_tmate.sh
      fi
  before_script:
    - python --version
    - python -m pip --version
    - python -m pip install poetry
    - poetry lock --check
    - poetry install --verbose
  # Creates a dependencies cache for each unique Docker image and Poetry lock
  # file hash pair to speed up dependency installations. Since caches are shared
  # between jobs and branches, cache keys must not apply to multiple version
  # targets to avoid installation errors. For more information, visit
  # https://docs.gitlab.com/ee/ci/caching.
  cache:
    key:
      files:
        - poetry.lock
      prefix: "$CI_JOB_IMAGE"
    paths:
      - .cache/pip
      - .venv
  image: "python:$PYTHON_VERSION_DEFAULT"
{%- if cookiecutter.prettier_support == "yes" %}

config:
  before_script:
    - node --version
    - npm --version
    - npm install --global prettier
  # Disable cache for job.
  cache: []
  image: "node:20"
  # Makes job only run on every Git event except for tags.
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $CI_WEB_JOB == "config"
    - if: $CI_PIPELINE_SOURCE == "web"
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - when: always
  script:
    - prettier --check .
  stage: build
{%- endif %}

lint:
  # Makes job run on every Git event except for tags.
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $CI_WEB_JOB == "lint"
    - if: $CI_PIPELINE_SOURCE == "web"
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - when: always
  script:
    - poetry run bandit -ilr src
    - poetry run black --check .
    - poetry run python scripts/build_docs.py
    - poetry run flake8 .
    - poetry run nbqa flake8 .
    - poetry run mypy .
    - poetry build
  stage: build
{%- if cookiecutter.pypi_support == "yes" %}

package:
  # Uploads packages as release files for Git tags.
  artifacts:
    paths:
      - "dist/{{ cookiecutter.project_slug }}-$CI_COMMIT_TAG-py-none-any.whl"
  # Makes job only run on Git tags.
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $CI_WEB_JOB == "package"
    - if: $CI_PIPELINE_SOURCE == "web"
      when: never
    - if: $CI_COMMIT_TAG
  script:
    - poetry build
    - poetry publish --username "$PYPI_USERNAME" --password "$PYPI_PASSWORD"
  stage: deploy
{%- endif %}

pages:
  # GitLab Pages uploads files inside the "public" folder after job completes.
  artifacts:
    paths:
      - public
  # Makes job only run on the default repository branch.
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $CI_WEB_JOB == "pages"
    - if: $CI_PIPELINE_SOURCE == "web"
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  script:
    - poetry run python scripts/build_docs.py
    - mv site public
  stage: deploy

test-linux:
  image: "python:$version"
  parallel:
    matrix:
      - version:
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
  # Makes job skip Git tags and run only default Python version on all events
  # except for commits to or merge requests to the default repository branch.
  # Then all Python versions are run.
  rules:
    - if: >-
        $CI_PIPELINE_SOURCE == "web" && $CI_WEB_JOB == "test-linux" &&
        $CI_WEB_PYTHON_VERSION == $version
    - if: $CI_PIPELINE_SOURCE == "web"
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH
    - if: $version == $PYTHON_VERSION_DEFAULT
  script:
    - poetry run pytest --cov
  stage: build

# Job is commented out, since MacOS shared runners are a beta GitLab feature
# that is only availabe upon special request. Uncomment if you have access.
# test-macos:
#   image: macos-12-xcode-14
#   # Makes job skip Git tags and run only on commits to or merge requests to the
#   # default repository branch.
#   rules:
#     - if: $CI_PIPELINE_SOURCE == "web" && $CI_WEB_JOB == "test-macos"
#     - if: $CI_PIPELINE_SOURCE == "web"
#       when: never
#     - if: $CI_COMMIT_TAG
#       when: never
#     - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
#     - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH
#   script:
#     - poetry run pytest --cov
#   stage: build
#   tags:
#     - shared-macos-amd64

test-windows:
  # Allows for debugging via Tmate session for manual pipelines.
  after_script:
    - |
      If ("$Env:CI_WEB_DEBUG" -Eq "true") {
        & scripts/setup_tmate.ps1
      }
  before_script:
    - $Env:PYTHON_KEYRING_BACKEND = "keyring.backends.null.Keyring"
    - $Env:Path = "C:\python310;C:\python310\Scripts;" + "$Env:Path"
    - choco install --yes --cache .cache/choco python310
    - python --version
    - python -m pip --version
    - python -m pip install poetry
    - poetry lock --check
    - poetry install --verbose
  # Creates a dependencies cache for each unique Poetry lock file hash pair to
  # speed up dependency installations.
  cache:
    key:
      files:
        - poetry.lock
      prefix: windows
    paths:
      - .cache/choco
      - .cache/pip
      - .venv
  # Makes job skip Git tags and run only on commits to or merge requests to the
  # default repository branch.
  rules:
    - if: $CI_PIPELINE_SOURCE == "web" && $CI_WEB_JOB == "test-windows"
    - if: $CI_PIPELINE_SOURCE == "web"
      when: never
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH
  script:
    - poetry run pytest --cov
  stage: build
  tags:
    - shared-windows
