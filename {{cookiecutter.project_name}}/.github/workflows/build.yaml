# GitHub Actions workflow file.
#
# For more information, visit
# https://docs.github.com/actions/learn-github-actions.

---
name: build

# Makes workflow run on any push or pull request.
on:
  pull_request:
    branches:
      - "**"
  push:
    branches:
      - "**"
  workflow_dispatch:
    inputs:
      debug:
        default: false
        description: Use TMate session for debugging on failure
        type: boolean
      job:
        default: test
        description: CI job to run
        options:
          - lint
          - test
        type: choice
      os:
        default: ubuntu
        description: Operating system for test job
        options:
          - macos
          - ubuntu
          - windows
        type: choice
      python:
        default: "3.10"
        description: Python version for test job
        options:
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
        type: choice

jobs:
  lint:
    if: {% raw -%} ${{ github.event_name != 'workflow_dispatch' || inputs.job == 'lint' }} {%- endraw %}
    name: Check code with formatter and linter
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3
      {% if cookiecutter.prettier_support == "yes" -%}
      - name: Install Node interpreter
        uses: actions/setup-node@v3
        with:
          node-version: "20"
      - name: Install Prettier formatter
        run: |
          node --version
          npm --version
          npm install --global prettier
      - name: Check configuration file formatting
        run: prettier --check .
      {% endif -%}
      - name: Install Python interpreter
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      - name: Cache Python packages
        uses: actions/cache@v3
        with:
          path: .venv
          key: >-
            {% raw -%} python-3.10_${{ runner.os }}_poetry-${{ hashFiles('poetry.lock') }} {%- endraw %}
      - name: Install Python packages
        run: |
          python --version
          python -m pip --version
          python -m pip install poetry
          poetry config virtualenvs.in-project true
          poetry lock --check
          poetry install --verbose
      - name: Run linter checks
        run: |
          poetry run bandit -ilr src
          poetry run black --check .
          poetry run python scripts/build_docs.py
          poetry run flake8 .
          poetry run nbqa flake8 .
          poetry run mypy .
          poetry build
      - name: Setup tmate session if job failed
        if: >-
          {% raw -%} ${{ failure() && github.event_name == 'workflow_dispatch' &&
          inputs.debug }} {%- endraw %}
        timeout-minutes: 60
        uses: mxschmitt/action-tmate@v3

  test:
    if: {% raw -%} ${{ github.event_name != 'workflow_dispatch' || inputs.job == 'test' }} {%- endraw %}
    name: {% raw -%} Run test suite for Python ${{ matrix.python }} on ${{ matrix.os }} {%- endraw %}
    strategy:
      fail-fast: false
      # Runs all job combinations on a manual run or any push or pull request to
      # the default branch. Runs only Python 3.10 Ubuntu job for all other Git
      # events.
      matrix:
        all:
          - >-
            {% raw -%} ${{ github.ref == format('refs/heads/{0}',
            github.event.repository.default_branch) || github.base_ref ==
            github.event.repository.default_branch }} {%- endraw %}
        exclude:
          - all: false
        include:
          - os: {% raw -%} ${{ inputs.os || 'ubuntu' }} {%- endraw %}
            python: {% raw -%} ${{ inputs.python || '3.10' }} {%- endraw %}
        os:
          - macos
          - ubuntu
          - windows
        python:
          - "3.8"
          - "3.9"
          - "3.10"
          - "3.11"
    runs-on: {% raw -%} ${{ matrix.os }}-latest {%- endraw %}
    steps:
      - name: Checkout code repository
        uses: actions/checkout@v3
      - name: Install Python interpreter
        uses: actions/setup-python@v4
        with:
          python-version: {% raw -%} ${{ matrix.python }} {%- endraw %}
      - name: Cache Python packages
        uses: actions/cache@v3
        with:
          path: .venv
          key: >-
            {% raw -%} python-${{ matrix.python }}_${{ runner.os }}_poetry-${{
            hashFiles('poetry.lock') }} {%- endraw %}
      - name: Install Python packages
        run: |
          python --version
          python -m pip --version
          python -m pip install poetry
          poetry config virtualenvs.in-project true
          poetry lock --check
          poetry install --verbose
      - name: Run test suite
        run: poetry run pytest --cov
      - name: Setup tmate session if job failed
        if: >-
          {% raw -%} ${{ failure() && github.event_name == 'workflow_dispatch' &&
          inputs.debug }} {%- endraw %}
        timeout-minutes: 60
        uses: mxschmitt/action-tmate@v3
