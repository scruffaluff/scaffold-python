{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Scaffold Python","text":"<p>Documentation: https://scruffaluff.github.io/scaffold-python</p> <p>Source Code: https://github.com/scruffaluff/scaffold-python</p> <p>Scaffold Python is a Cookiecutter template project for generating Python repository layouts. To create a new Python application project with the template first install Cookiecutter. Then execute</p> <pre><code>cookiecutter https://github.com/scruffaluff/scaffold-python\n</code></pre> <p>Follow the interactive prompts, and a folder, with your selected <code>project_name</code>, will be generated in your current working directory.</p>"},{"location":"#setup","title":"Setup","text":"<p>To develop with the generated project, install Poetry and step into the project folder. Afterwards execute:</p> <pre><code>poetry install\npoetry shell\nblack .\ngit init\n</code></pre> <p>Then the development environment is configured and you are ready to code.</p>"},{"location":"#tooling","title":"Tooling","text":"<p>Every generated project configures the following tools for development usage:</p> <ul> <li>Bandit: Security linter.</li> <li>Black: Opinionated code formatter.</li> <li>Coverage: Test coverage   measurer.</li> <li>Flake8: Code linter.</li> <li>Flake8 Bugbear: Flake8 plugin for     finding bugs and design problems.</li> <li>Flake8 Docstrings: Flake8     plugin for checking docstring styles.</li> <li>Flake8 Import Order: Flake8     plugin for checking module import orders.</li> <li>MkDocs: Documentation static site generator.</li> <li>Mypy: Static type checker.</li> <li>Poetry: Dependency manager and packager.</li> <li>Pytest: Testing framework.</li> <li>Tox: Test automator.</li> </ul> <p>The following tools are configured if you select optional features:</p> <ul> <li><code>prettier_support</code>:</li> <li>Prettier: Opinionated code formatter for JSON,     Markdown, and YAML files. Requires NodeJS to be     externally installed on your system.</li> </ul>"},{"location":"#layout","title":"Layout","text":"<p>The following diagram shows all possible files generated from scaffolding. If a file is followed by <code>{option: selection}</code>, then the path and its possible subcontents are only generated for that chosen context.</p> <pre><code>{{project_name}}\n\u251c\u2500\u2500 .github  {githost: github}\n\u2502   \u2514\u2500\u2500 workflows\n\u2502       \u251c\u2500\u2500 build.yaml\n\u2502       \u251c\u2500\u2500 pages.yaml\n\u2502       \u2514\u2500\u2500 release.yaml\n\u251c\u2500\u2500 .dockerignore\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 .gitlab-ci.yaml  {githost: gitlab}\n\u251c\u2500\u2500 .prettierignore  {prettier_support: yes}\n\u251c\u2500\u2500 .prettierrc.yaml  {prettier_support: yes}\n\u251c\u2500\u2500 CONTRIBUTING.md\n\u251c\u2500\u2500 docs\n\u2502   \u251c\u2500\u2500 api\n\u2502   |   \u2514\u2500\u2500 index.md\n\u2502   \u2514\u2500\u2500 usage\n\u2502       \u2514\u2500\u2500 index.md\n\u251c\u2500\u2500 examples\n\u2502   \u2514\u2500\u2500 __init__.py\n\u251c\u2500\u2500 LICENSE.md\n\u251c\u2500\u2500 mkdocs.yml\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 scripts\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 build_docs.py\n\u2502   \u251c\u2500\u2500 setup_tmate.ps1  {githost: gitlab}\n\u2502   \u2514\u2500\u2500 setup_tmate.sh  {githost: gitlab}\n\u251c\u2500\u2500 src\n\u2502   \u2514\u2500\u2500 {{project_slug}}\n\u2502       \u251c\u2500\u2500 __init__.py\n\u2502       \u251c\u2500\u2500 __main__.py  {cli_support: yes}\n\u2502       \u2514\u2500\u2500 py.typed\n\u251c\u2500\u2500 tests\n\u2502   \u251c\u2500\u2500 conftest.py\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2514\u2500\u2500 tox.ini\n</code></pre>"},{"location":"#continous-integration","title":"Continous Integration","text":"<p>Projects generated with this scaffolding repository are automatically configured to use GitHub CI workflows and GitLab CI pipelines.</p>"}]}