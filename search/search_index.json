{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Scaffold Python \u00b6 Documentation : https://scruffaluff.github.io/scaffold-python Source Code : https://github.com/scruffaluff/scaffold-python Scaffold Python is a Cookiecutter template project for generating Python repository layouts. To create a new Python application project with the template first install Cookiecutter . Then execute cookiecutter https://github.com/scruffaluff/scaffold-python Follow the interactive prompts, and a folder, with your selected project_name , will be generated in your current working directory. Setup \u00b6 To develop with the generated project, install Poetry and step into the project folder. Afterwards execute: poetry install poetry shell black . git init Then the development environment is configured and you are ready to code. Tooling \u00b6 Every generated project configures the following tools for development usage: Bandit : Security linter. Black : Opinionated code formatter. Coverage : Test coverage measurer. Flake8 : Code linter. Flake8 Bugbear : Flake8 plugin for finding bugs and design problems. Flake8 Docstrings : Flake8 plugin for checking docstring styles. Flake8 Import Order : Flake8 plugin for checking module import orders. MkDocs : Documentation static site generator. Mypy : Static type checker. Poetry : Dependency manager and packager. Pytest : Testing framework. Tox : Test automator. The following tools are configured if you select optional features: prettier_support : Prettier : Opinionated code formatter for JSON, Markdown, and YAML files. Requires NodeJS to be externally installed on your system. Layout \u00b6 The following diagram shows all possible files generated from scaffolding. If a file is followed by {option: selection} , then the path and its possible subcontents are only generated for that chosen context. {{project_name}} \u251c\u2500\u2500 .github {githost: github} \u2502 \u2514\u2500\u2500 workflows \u2502 \u251c\u2500\u2500 build.yaml | \u251c\u2500\u2500 pages.yaml \u2502 \u251c\u2500\u2500 release.yaml \u2502 \u2514\u2500\u2500 test.yaml \u251c\u2500\u2500 .dockerignore \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 .prettierignore {prettier_support: yes} \u251c\u2500\u2500 .prettierrc.yaml {prettier_support: yes} \u251c\u2500\u2500 CONTRIBUTING.md \u251c\u2500\u2500 docs | \u251c\u2500\u2500 api \u2502 | \u2514\u2500\u2500 index.md | \u251c\u2500\u2500 contrib \u2502 | \u2514\u2500\u2500 index.md \u2502 \u251c\u2500\u2500 css \u2502 \u2502 \u2514\u2500\u2500 mkdocstrings.css \u2502 \u251c\u2500\u2500 install \u2502 \u2502 \u2514\u2500\u2500 index.md \u2502 \u2514\u2500\u2500 learn \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 examples \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 LICENSE.md \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 mypy.ini \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 scripts | \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 build_docs.py \u251c\u2500\u2500 src \u2502 \u2514\u2500\u2500 {{project_slug}} \u2502 \u251c\u2500\u2500 __init__.py | \u251c\u2500\u2500 __main__.py {cli_support: yes} \u2502 \u2514\u2500\u2500 py.typed \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 conftest.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 integration \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 unit \u2502 \u2514\u2500\u2500 __init__.py \u2514\u2500\u2500 tox.ini Continous Integration \u00b6 Projects generated with this scaffolding repository come with configured pipeline for GitHub CI workflows and GitLab CI pipelines. Linting and Testing \u00b6 Documentation Publishing \u00b6 Package Publishing \u00b6","title":"Scaffold Python"},{"location":"#scaffold-python","text":"Documentation : https://scruffaluff.github.io/scaffold-python Source Code : https://github.com/scruffaluff/scaffold-python Scaffold Python is a Cookiecutter template project for generating Python repository layouts. To create a new Python application project with the template first install Cookiecutter . Then execute cookiecutter https://github.com/scruffaluff/scaffold-python Follow the interactive prompts, and a folder, with your selected project_name , will be generated in your current working directory.","title":"Scaffold Python"},{"location":"#setup","text":"To develop with the generated project, install Poetry and step into the project folder. Afterwards execute: poetry install poetry shell black . git init Then the development environment is configured and you are ready to code.","title":"Setup"},{"location":"#tooling","text":"Every generated project configures the following tools for development usage: Bandit : Security linter. Black : Opinionated code formatter. Coverage : Test coverage measurer. Flake8 : Code linter. Flake8 Bugbear : Flake8 plugin for finding bugs and design problems. Flake8 Docstrings : Flake8 plugin for checking docstring styles. Flake8 Import Order : Flake8 plugin for checking module import orders. MkDocs : Documentation static site generator. Mypy : Static type checker. Poetry : Dependency manager and packager. Pytest : Testing framework. Tox : Test automator. The following tools are configured if you select optional features: prettier_support : Prettier : Opinionated code formatter for JSON, Markdown, and YAML files. Requires NodeJS to be externally installed on your system.","title":"Tooling"},{"location":"#layout","text":"The following diagram shows all possible files generated from scaffolding. If a file is followed by {option: selection} , then the path and its possible subcontents are only generated for that chosen context. {{project_name}} \u251c\u2500\u2500 .github {githost: github} \u2502 \u2514\u2500\u2500 workflows \u2502 \u251c\u2500\u2500 build.yaml | \u251c\u2500\u2500 pages.yaml \u2502 \u251c\u2500\u2500 release.yaml \u2502 \u2514\u2500\u2500 test.yaml \u251c\u2500\u2500 .dockerignore \u251c\u2500\u2500 .gitignore \u251c\u2500\u2500 .prettierignore {prettier_support: yes} \u251c\u2500\u2500 .prettierrc.yaml {prettier_support: yes} \u251c\u2500\u2500 CONTRIBUTING.md \u251c\u2500\u2500 docs | \u251c\u2500\u2500 api \u2502 | \u2514\u2500\u2500 index.md | \u251c\u2500\u2500 contrib \u2502 | \u2514\u2500\u2500 index.md \u2502 \u251c\u2500\u2500 css \u2502 \u2502 \u2514\u2500\u2500 mkdocstrings.css \u2502 \u251c\u2500\u2500 install \u2502 \u2502 \u2514\u2500\u2500 index.md \u2502 \u2514\u2500\u2500 learn \u2502 \u2514\u2500\u2500 index.md \u251c\u2500\u2500 examples \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 LICENSE.md \u251c\u2500\u2500 mkdocs.yml \u251c\u2500\u2500 mypy.ini \u251c\u2500\u2500 pyproject.toml \u251c\u2500\u2500 README.md \u251c\u2500\u2500 scripts | \u251c\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 build_docs.py \u251c\u2500\u2500 src \u2502 \u2514\u2500\u2500 {{project_slug}} \u2502 \u251c\u2500\u2500 __init__.py | \u251c\u2500\u2500 __main__.py {cli_support: yes} \u2502 \u2514\u2500\u2500 py.typed \u251c\u2500\u2500 tests \u2502 \u251c\u2500\u2500 conftest.py \u2502 \u251c\u2500\u2500 __init__.py \u2502 \u251c\u2500\u2500 integration \u2502 \u2502 \u2514\u2500\u2500 __init__.py \u2502 \u2514\u2500\u2500 unit \u2502 \u2514\u2500\u2500 __init__.py \u2514\u2500\u2500 tox.ini","title":"Layout"},{"location":"#continous-integration","text":"Projects generated with this scaffolding repository come with configured pipeline for GitHub CI workflows and GitLab CI pipelines.","title":"Continous Integration"},{"location":"#linting-and-testing","text":"","title":"Linting and Testing"},{"location":"#documentation-publishing","text":"","title":"Documentation Publishing"},{"location":"#package-publishing","text":"","title":"Package Publishing"}]}